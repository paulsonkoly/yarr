username: '<freenode user name here>'
password: '<freenode pass here>'
nick: 'nick'
channels:
  - '#ruby'
ruby_version: '2.7.1'
ops_host_mask: 'ruby/staff/'
evaluator:
  :languages:
    :"27": "2.7.0"
    :"26": "2.6.0"
    :"25": "2.5.3"
    :"24": "2.4.1"
    :"23": "2.3.3"
    :"22": "2.2.4"
    :"21": "2.1.5"
    :"20": "2.0.0"
  :modes:
    :default:
      :filter: {}
      :output: :truncate
      :format: |
        # encoding: utf-8

        p begin
          %s
        end
    bare:
      :filter: {}
      :output: :truncate
      :format: |
        %s
    asm:
      :filter:
        '\': '\\'
        '`': '\\`'
      :output: :link
      :verb: 'disassembled'
      :format: |
        # encoding: utf-8

        begin
          puts RubyVM::InstructionSequence.compile(%%q`%s`).disasm
        rescue Exception
          puts "#{$!} (#{$!.class})"
          $stdout.flush
          raise $!
        end
    ast:
      :filter:
        '\': '\\'
        '`': '\\`'
      :output: :link
      :verb: 'parsed'
      :format:
        :default: |
          # encoding: utf-8

          begin
            pp RubyVM::AbstractSyntaxTree.parse(%%q`%s`)
          rescue Exception
            puts "#{$!} (#{$!.class})"
            $stdout.flush
            raise $!
          end
        :"20": &old_ast |
          # encoding: utf-8

          require 'ripper'
          require 'pp'
          begin
            pp Ripper.sexp(%%q`%s`)
          rescue Exception
            puts "#{$!} (#{$!.class})"
            $stdout.flush
            raise $!
          end
        ":21": *old_ast
        ":22": *old_ast
        ":23": *old_ast
        ":24": *old_ast
        ":25": *old_ast
    tok:
      :filter:
        '\': '\\'
        '`': '\\`'
      :output: :link
      :verb: 'tokenized'
      :format: |
        # encoding: utf-8

        require 'ripper'
        require 'pp'
        begin
          pp Ripper.lex(%%q`%s`)
        rescue Exception
          puts "#{$!} (#{$!.class})"
          $stdout.flush
          raise $!
        end
